# -*- coding: utf-8 -*-
"""task-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/PerlaSaiVarshithReddy/6f2724ca1dafc1d826679ac5db4a8ce6/task-2.ipynb
"""

import pandas as pd

# Load Titanic dataset
df = pd.read_csv("/content/sample_data/netflix_titles.csv")

# Preview
df.head()

df.isnull().sum()

# Fill missing 'director', 'cast', 'country' with 'Unknown'
df['director'].fillna('Unknown', inplace=True)
df['cast'].fillna('Unknown', inplace=True)
df['country'].fillna('Unknown', inplace=True)

from sklearn.preprocessing import LabelEncoder

# Encode 'type' (TV Show = 0, Movie = 1)
df['type'] = df['type'].map({'TV Show': 0, 'Movie': 1})

# Encode 'rating' with LabelEncoder
le = LabelEncoder()
df['rating'] = le.fit_transform(df['rating'].astype(str))

# Simplify 'country' to top 5 countries, rest as 'Other'
top_countries = df['country'].value_counts().nlargest(5).index
df['country'] = df['country'].apply(lambda x: x if x in top_countries else 'Other')

# One-hot encode 'country'
df = pd.get_dummies(df, columns=['country'], drop_first=True)

from sklearn.preprocessing import StandardScaler
import numpy as np

# Separate numeric part of 'duration'
def convert_duration(val):
    if 'min' in str(val):
        return int(val.split()[0])
    else:
        return np.nan  # For TV Shows ("1 Season", etc.)

df['duration_minutes'] = df['duration'].apply(convert_duration)

# Fill missing durations with median (TV Shows will be NaN)
median_duration = df['duration_minutes'].median()
df['duration_minutes'].fillna(median_duration, inplace=True)

# Scale duration
scaler = StandardScaler()
df['duration_scaled'] = scaler.fit_transform(df[['duration_minutes']])

df['release_decade'] = (df['release_year'] // 10) * 10

df['num_cast_members'] = df['cast'].apply(lambda x: len(str(x).split(',')) if x != 'Unknown' else 0)

df['has_multiple_directors'] = df['director'].apply(lambda x: 1 if ',' in x else 0)

selected_features = [
    'type',
    'rating',
    'duration_scaled',
    'release_year',
    'release_decade',
    'num_cast_members',
    'has_multiple_directors',
] + [col for col in df.columns if col.startswith("country_")]

df_model = df[selected_features]
df_model.head()